// Importer la fonction SHA256 de ma biblioth√®que cypto-js
const SHA256 = require('crypto-js/sha256');
const localtime = require('localtime');


//--------------------------------------------------------------//
//              ÍßÅìäàíÜú Classe Block íÜúìäâÍßÇ                      //
//-------------------------------------------------------------//

class Block{
    constructor(index, timestamp, data, previousHash = ''){
        this.index = index; // Option permettant de situer le block dans la blockchain
        this.timestamp = localtime( '' ,'DD/MM/YYYY hh:mm:ss'); // Permet de nous dire quand a √©t√© cr√©e le block
        this.data = data; // Toute les datas et d√©tails que l'on veut associer √† ce block (Argent transf√©r√©, √âmetteur, R√©cepteur)
        this.previousHash = previousHash; // Contient le hash du dernier block qui pr√©c√®de celui-ci
        this.hash = this.calculateHash(); // Contient le hash de notre block, calcul le hash du block
        this.nonce = 0; // Valeur du nonce : il s'agit d'un nombre al√©atoire (utilis√© en cryptographie) qui n'a rien √† voir avec notre bloc, mais qui peut √™tre modifi√© 
        activate
    }

    calculateHash(){ // M√©thode : Calcul le hash du block d'en haut
        return SHA256(this.index + this.previousHash + this.timestamp + /* Convertir un objet JS en chaine */ JSON.stringify(this.data) + this.nonce).toString(); // Prendre la sortie du SHA256 
        // et convertir de force en chaine

    }

    // Limiter le spam sur notre blockchain de cr√©ation de block en ajoutant de la difficult√©
    // Eviter un probleme de s√©curit√© : Changer le contenu d'un bloc et recalculer son hash pour tous les blocs qui succ√®de et pr√©c√®de et se retrouver avec une chain valide
    // POW : Prouver que le mineur a mis beaucoup de puissance de calcul dans la cr√©ation d'un bloc
    // BTC n√©cessite le hachage d'un bloc pour commencer avec un certain nombre de z√©ros. Cela permet de NE PAS influencer la sortie de la fonction de hachage
    // Vous devez essayer beaucoup de combinaisons et esp√©rer etre le premier qui a un nombre suffisant de z√©ros devant le hash

    // Difficulty : permet qu'il y ait une quantit√© constante de nouveaux blocks. Ex Bitcoin : Nouveau block toutes les 10 minutes
    mineBlock(difficulty){ // M√©thode : Miner un block
        console.log("Le block mine √† : " + this.timestamp); 
        // Boucle tant que : Faire en sorte que le hachage de notre bloc commence par un certain nombre de z√©ros
        while(this.hash.substring(0, difficulty) !== Array(difficulty + 1).join("0")){//join c'est joindre les caract√®res dans un tableau et renvoie sous forme de chaines
            // Sous chaine : extraire des caract√®res d'une chaine 
        // Exemple Si diff est 4, alors prendre les 4 premiers caract√®res de notre hash tant que la longueur de notre hash n'est pas √©gal √† tout les z√©ros
        // C'est une astuce rapide pour faire une cha√Æne de z√©ros qui est exactement la longueur de la difficult√©.
            this.nonce++; // Incr√©menter le nonce 1 par 1 aussi longtemps que notre hash ne commence pas par un nombre suffisant de z√©ros.
            this.hash = this.calculateHash(); // Calculer le hash de ce block
            
                
        } 
        console.log("Le block est min√©: " + this.hash);
    }
}

//--------------------------------------------------------------//
//              ÍßÅìäàíÜú Classe BlockChain íÜúìäâÍßÇ                 //
//-------------------------------------------------------------//

class Blockchain{
    constructor(){ // Constructeur : M√©thode sp√©ciale utilis√©e pour initialiser des objets
        this.chain = [this.createGenesisBlock()]; // Cr√©ation d'un tableau de block avec l'initialisation de notre genesis block
        this.difficulty = 4; // Difficult√© du minage d'un block
    }

    createGenesisBlock(){ // M√©thode : Cr√©ation du block de d√©part ajout√© manuellement
        return new Block(0, "17/10/2022", "Genesis Block (le d√©but)", "0");

    }

    getLatestBlock(){ // M√©thode : Retourner le dernier block sur la blockchain
        return this.chain[this.chain.length - 1]; // Retourner le dernier √©l√©ment de la "chain"
    }

    addBlock(newBlock){ // M√©thode : Cr√©ation d'un nouveau block
        newBlock.previousHash = this.getLatestBlock().hash; // Le nouveau block contient le hash du block pr√©c√©dent = retourne le dernier block et sera hash√©
        newBlock.mineBlock(this.difficulty); // Ce nouveau block aura pour objet mineBlock permettant de miner celui-ci
        //newBlock.hash = newBlock.calculateHash(); // Recalculer le hash du nouveau block (chaque nouveau block, il faut recalculer un hash pour le block suivant)
        this.chain.push(newBlock); // Ajouter un nouvel √©l√©ment "newBlock" √† la fin de notre tableau "chain"

    }

    isChainValid(){ // M√©thode : V√©rifier si la chain est valide et faux si quelque chose ne va pas

        for(let i = 1 /* i = index = 1 */; i < this.chain.length; i++){
            const currentBlock = this.chain[i]; // R√©cup√©rer le block actuel avec la position de i dans la "chain"
            const previousBlock = this.chain[i - 1]; // R√©cup√©rer le block pr√©c√©dent avec la position de i - 1 dans la "chain"

            if(currentBlock.hash != currentBlock.calculateHash()){ // Check si le block est reli√© entre eux et est valide
                // Si le hash de notre block actuel n'est pas √©gal au calcul du hash de notre block actuel, alors c'est faux
                return "Erreur de lien :  M√™me hash que le bloc pr√©c√©dent et/ou calcul du hash";
            }
                // V√©rifier si notre block actuel pointe bien vers le block pr√©c√©dent
            if(currentBlock.previousHash != previousBlock.hash){ // V√©rifier que le hachage pr√©c√©dent est correctement d√©fini :
                // Si notre block actuel a un hachage pr√©c√©dent qui n'est pas √©gal au hachage de notre block pr√©c√©dent, retourner false
                
                return "Erreur : Le hachage du block pr√©c√©dent n'est pas √©gal au previousHash de CE block";
            }
        }

        return "La blockchain est en orde !"      

    }

}

//--------------------------------------------------------------//
//              ÍßÅìäàíÜú Partie Test íÜúìäâÍßÇ                       //
//-------------------------------------------------------------//


let ABChain = new Blockchain(); // Cr√©er variable ABChain qui repr√©sentera une nouvelle blockchain
